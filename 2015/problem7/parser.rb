#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Problem7
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 47)

  def parse(tokens)
    @tokens = tokens

    do_parse
  end

  def next_token
    @tokens.shift
  end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,     9,     6,    10,    11,     7,     4,     3,     2,     8,
    12 ]

racc_action_check = [
     1,     5,     1,     6,     6,     1,     0,     0,     0,     4,
     7 ]

racc_action_pointer = [
     4,     0,   nil,   nil,     5,     1,     0,     6,   nil,   nil,
   nil,   nil,   nil ]

racc_action_default = [
    -8,    -8,    -3,    -4,    -8,    -8,    -8,    -8,    -6,    13,
    -1,    -2,    -5 ]

racc_goto_table = [
     1 ]

racc_goto_check = [
     1 ]

racc_goto_pointer = [
   nil,     0 ]

racc_goto_default = [
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 7, :_reduce_1,
  3, 7, :_reduce_2,
  1, 7, :_reduce_3,
  1, 7, :_reduce_4,
  3, 7, :_reduce_5,
  2, 7, :_reduce_6,
  1, 7, :_reduce_7 ]

racc_reduce_n = 8

racc_shift_n = 13

racc_token_table = {
  false => 0,
  :error => 1,
  :OP => 2,
  :NUM => 3,
  :VAR => 4,
  "->" => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "OP",
  "NUM",
  "VAR",
  "\"->\"",
  "$start",
  "expr" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 4)
  def _reduce_1(val, _values, result)
        num1 = val[0]
    num2 = val[2]
    op =  case val[1]
          when "RSHIFT" then ">>"
          when "LSHIFT" then "<<"
          when "OR" then "|"
          when "AND" then "&"
          end

    result = "#{num1} #{op} #{num2}"
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 16)
  def _reduce_2(val, _values, result)
        num1 = val[0]
    num2 = val[2]
    op =  case val[1]
          when "RSHIFT" then "<<"
          when "LSHIFT" then ">>"
          when "OR" then "|"
          when "AND" then "&"
          end

    result = "#{num1} #{op} _#{num2}"
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_3(val, _values, result)
     result =  "_#{val[0]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_4(val, _values, result)
     result =  "#{val[0]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_5(val, _values, result)
    result = "_#{val[2]} = #{val[0]}"
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_6(val, _values, result)
        op =  case val[0]
          when "NOT" then "~"
          end
    result = "#{op}_#{val[1]}"
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_7(val, _values, result)
     result =  "#{val[0]}" 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Problem7
